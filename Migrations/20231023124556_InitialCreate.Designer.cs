// <auto-generated />
using System;
using Cadastro.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cadastro.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231023124556_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cadastro.Models.Estacionamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Estacionamentos");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Nome = "Auto Park",
                            UsuarioId = 1L
                        });
                });

            modelBuilder.Entity("Cadastro.Models.Sensor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VagaId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VagaId")
                        .IsUnique();

                    b.ToTable("Sensores");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Latitude = "68.4908",
                            Longitude = "-61.2506",
                            VagaId = 1L
                        });
                });

            modelBuilder.Entity("Cadastro.Models.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Preferencia")
                        .HasColumnType("int");

                    b.Property<byte[]>("Senha_hash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Senha_salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Cpf = "12345678910",
                            Email = "anilmar@gmail.com",
                            Nome = "anilmar",
                            Preferencia = 1,
                            Senha_hash = new byte[] { 178, 50, 158, 196, 98, 116, 196, 126, 13, 172, 216, 43, 83, 215, 206, 161, 57, 101, 225, 153, 216, 234, 86, 177, 36, 220, 3, 125, 246, 142, 62, 73, 22, 64, 103, 59, 30, 188, 10, 117, 103, 76, 186, 218, 91, 76, 124, 15, 139, 55, 107, 173, 191, 171, 108, 101, 197, 28, 39, 11, 145, 191, 118, 244 },
                            Senha_salt = new byte[] { 184, 32, 149, 40, 161, 20, 78, 70, 46, 59, 117, 12, 192, 115, 20, 159, 19, 243, 40, 94, 150, 74, 144, 227, 143, 161, 102, 46, 9, 226, 146, 170, 214, 85, 245, 190, 66, 145, 164, 210, 69, 37, 105, 136, 25, 153, 100, 71, 159, 57, 234, 202, 160, 26, 159, 161, 133, 130, 184, 167, 35, 211, 175, 4, 208, 131, 155, 55, 9, 232, 16, 182, 174, 214, 12, 235, 134, 185, 76, 39, 40, 201, 12, 153, 86, 145, 111, 46, 10, 136, 56, 152, 66, 87, 103, 76, 138, 155, 121, 231, 83, 156, 40, 7, 180, 58, 164, 150, 95, 124, 122, 176, 226, 139, 219, 190, 93, 16, 120, 138, 58, 64, 60, 220, 211, 60, 25, 129 },
                            TipoUsuario = 2
                        });
                });

            modelBuilder.Entity("Cadastro.Models.UsuarioVaga", b =>
                {
                    b.Property<long>("CodData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CodData"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emissor_pagamento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Forma_pagamento")
                        .HasColumnType("int");

                    b.Property<DateTime>("Ocupacao_final")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Ocupacao_inicial")
                        .HasColumnType("datetime2");

                    b.Property<string>("Receptor_pagamento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.Property<long>("VagaId")
                        .HasColumnType("bigint");

                    b.HasKey("CodData");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("VagaId");

                    b.ToTable("UsuarioVagas");

                    b.HasData(
                        new
                        {
                            CodData = 1L,
                            Data = new DateTime(2023, 10, 23, 9, 45, 56, 899, DateTimeKind.Local).AddTicks(4665),
                            Emissor_pagamento = "Anilmar",
                            Forma_pagamento = 1,
                            Ocupacao_final = new DateTime(2023, 10, 23, 9, 45, 56, 899, DateTimeKind.Local).AddTicks(4676),
                            Ocupacao_inicial = new DateTime(2023, 10, 23, 9, 45, 56, 899, DateTimeKind.Local).AddTicks(4675),
                            Receptor_pagamento = "Auto Park",
                            UsuarioId = 1L,
                            VagaId = 1L
                        });
                });

            modelBuilder.Entity("Cadastro.Models.Vaga", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Andar")
                        .HasColumnType("int");

                    b.Property<int>("Disponibilidade")
                        .HasColumnType("int");

                    b.Property<long>("EstacionamentoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Numero")
                        .HasColumnType("float");

                    b.Property<int>("Preferencia")
                        .HasColumnType("int");

                    b.Property<string>("Secao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstacionamentoId");

                    b.ToTable("Vagas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Andar = 1,
                            Disponibilidade = 1,
                            EstacionamentoId = 1L,
                            Latitude = "68.4908",
                            Longitude = "-61.2506",
                            Numero = 1.0,
                            Preferencia = 1,
                            Secao = "A1"
                        });
                });

            modelBuilder.Entity("Cadastro.Models.Estacionamento", b =>
                {
                    b.HasOne("Cadastro.Models.Usuario", "Usuario")
                        .WithMany("Estacionamentos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Cadastro.Models.Sensor", b =>
                {
                    b.HasOne("Cadastro.Models.Vaga", "Vaga")
                        .WithOne("Sensor")
                        .HasForeignKey("Cadastro.Models.Sensor", "VagaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("Cadastro.Models.UsuarioVaga", b =>
                {
                    b.HasOne("Cadastro.Models.Usuario", "Usuario")
                        .WithMany("UsuarioVagas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cadastro.Models.Vaga", "Vaga")
                        .WithMany("UsuarioVagas")
                        .HasForeignKey("VagaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("Cadastro.Models.Vaga", b =>
                {
                    b.HasOne("Cadastro.Models.Estacionamento", "Estacionamento")
                        .WithMany("Vagas")
                        .HasForeignKey("EstacionamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estacionamento");
                });

            modelBuilder.Entity("Cadastro.Models.Estacionamento", b =>
                {
                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("Cadastro.Models.Usuario", b =>
                {
                    b.Navigation("Estacionamentos");

                    b.Navigation("UsuarioVagas");
                });

            modelBuilder.Entity("Cadastro.Models.Vaga", b =>
                {
                    b.Navigation("Sensor");

                    b.Navigation("UsuarioVagas");
                });
#pragma warning restore 612, 618
        }
    }
}
